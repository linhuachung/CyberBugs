{"ast":null,"code":"import { fork, take, takeEvery, delay, takeLatest, select, call, put } from \"redux-saga/effects\";\nimport { taskService } from \"../../../services/TaskService\";\nimport { STATUS_CODE } from './../../../util/constants/settingSystem';\nimport { DISPLAY_LOADING, HIDE_LOADING } from \"./../../constants/LoadingConst\";\nimport { notifiFunction } from './../../../util/Notification/notificationCyberbugs'; // -----------------------NHIỆM VỤ CREATE TASK CỦA PROJECT-------------------\n\nfunction* createTaskSaga(action) {\n  console.log(\"vào generator Func createTaskSaga\");\n  yield put({\n    type: DISPLAY_LOADING\n  });\n  yield delay(2000);\n\n  try {\n    const {\n      data,\n      status\n    } = yield call(() => taskService.createTask(action.taskObject));\n\n    if (status === STATUS_CODE.SUCCESS) {\n      //Nếu call api tạo task thành công\n      //Đóng form createTask\n      yield put({\n        type: 'CLOSE_DRAWER'\n      }); //hiển thị notification của antdesign là đã tạo task thành công \n\n      notifiFunction(\"success\", \"Create Task Successfully\");\n    }\n  } catch (error) {\n    console.log(\"error\", error.response.data);\n  } //call api thành công or thất bại thi đều tắt loading\n\n\n  yield put({\n    type: HIDE_LOADING\n  });\n}\n\nexport function* theoDoiCreateTaskSaga() {\n  yield takeLatest('CREATE_TASK_SAGA', createTaskSaga);\n}","map":{"version":3,"sources":["D:/Chun Folder/Test web html/Cyberbugs1/src/redux/sagas/CyberBugs/TaskSaga.js"],"names":["fork","take","takeEvery","delay","takeLatest","select","call","put","taskService","STATUS_CODE","DISPLAY_LOADING","HIDE_LOADING","notifiFunction","createTaskSaga","action","console","log","type","data","status","createTask","taskObject","SUCCESS","error","response","theoDoiCreateTaskSaga"],"mappings":"AAAA,SACIA,IADJ,EAEIC,IAFJ,EAGIC,SAHJ,EAIIC,KAJJ,EAKIC,UALJ,EAMIC,MANJ,EAOIC,IAPJ,EAQIC,GARJ,QASS,oBATT;AAUA,SAASC,WAAT,QAA4B,+BAA5B;AACA,SAASC,WAAT,QAA4B,yCAA5B;AACA,SAASC,eAAT,EAA0BC,YAA1B,QAA8C,gCAA9C;AACA,SAASC,cAAT,QAA+B,oDAA/B,C,CAGA;;AAEA,UAAUC,cAAV,CAA0BC,MAA1B,EAAkC;AAC9BC,EAAAA,OAAO,CAACC,GAAR,CAAY,mCAAZ;AAEA,QAAMT,GAAG,CAAC;AACNU,IAAAA,IAAI,EAAEP;AADA,GAAD,CAAT;AAIE,QAAMP,KAAK,CAAC,IAAD,CAAX;;AAEF,MAAG;AACC,UAAM;AAACe,MAAAA,IAAD;AAAOC,MAAAA;AAAP,QAAiB,MAAMb,IAAI,CAAE,MAAME,WAAW,CAACY,UAAZ,CAAuBN,MAAM,CAACO,UAA9B,CAAR,CAAjC;;AAEA,QAAGF,MAAM,KAAKV,WAAW,CAACa,OAA1B,EAAmC;AAC/B;AACA;AACA,YAAMf,GAAG,CAAC;AACNU,QAAAA,IAAI,EAAE;AADA,OAAD,CAAT,CAH+B,CAO9B;;AACDL,MAAAA,cAAc,CAAC,SAAD,EAAY,0BAAZ,CAAd;AAEH;AAEJ,GAfD,CAeE,OAAMW,KAAN,EAAY;AACVR,IAAAA,OAAO,CAACC,GAAR,CAAY,OAAZ,EAAqBO,KAAK,CAACC,QAAN,CAAeN,IAApC;AACH,GA1B6B,CA4B1B;;;AACA,QAAMX,GAAG,CAAC;AACNU,IAAAA,IAAI,EAAEN;AADA,GAAD,CAAT;AAGP;;AAGD,OAAO,UAAUc,qBAAV,GAAkC;AACrC,QAAMrB,UAAU,CAAC,kBAAD,EAAqBS,cAArB,CAAhB;AACD","sourcesContent":["import {\r\n    fork,\r\n    take,\r\n    takeEvery,\r\n    delay,\r\n    takeLatest,\r\n    select,\r\n    call,\r\n    put,\r\n  } from \"redux-saga/effects\";\r\nimport { taskService } from \"../../../services/TaskService\";\r\nimport { STATUS_CODE } from './../../../util/constants/settingSystem';\r\nimport { DISPLAY_LOADING, HIDE_LOADING } from \"./../../constants/LoadingConst\";\r\nimport { notifiFunction } from './../../../util/Notification/notificationCyberbugs';\r\n\r\n\r\n// -----------------------NHIỆM VỤ CREATE TASK CỦA PROJECT-------------------\r\n\r\nfunction *createTaskSaga (action) {\r\n    console.log(\"vào generator Func createTaskSaga\");\r\n\r\n    yield put({\r\n        type: DISPLAY_LOADING,\r\n      });\r\n    \r\n      yield delay(2000);\r\n\r\n    try{\r\n        const {data, status} = yield call (() => taskService.createTask(action.taskObject))\r\n\r\n        if(status === STATUS_CODE.SUCCESS) {\r\n            //Nếu call api tạo task thành công\r\n            //Đóng form createTask\r\n            yield put({\r\n                type: 'CLOSE_DRAWER',\r\n            });\r\n\r\n             //hiển thị notification của antdesign là đã tạo task thành công \r\n            notifiFunction(\"success\", \"Create Task Successfully\");\r\n\r\n        }\r\n\r\n    } catch(error){\r\n        console.log(\"error\", error.response.data);\r\n    }\r\n\r\n        //call api thành công or thất bại thi đều tắt loading\r\n        yield put({\r\n            type: HIDE_LOADING,\r\n          });\r\n}\r\n\r\n\r\nexport function* theoDoiCreateTaskSaga() {\r\n    yield takeLatest('CREATE_TASK_SAGA', createTaskSaga);\r\n  }\r\n  \r\n  "]},"metadata":{},"sourceType":"module"}