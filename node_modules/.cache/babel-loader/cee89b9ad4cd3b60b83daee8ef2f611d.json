{"ast":null,"code":"import Axios from \"axios\";\nimport { fork, take, takeEvery, delay, takeLatest, select, call, put } from \"redux-saga/effects\";\nimport { USER_LOGIN_CYBERBUGS, USER_SIGNIN_CYBERBUGS_API } from \"./../../constants/Cyberbugs/Cyberbugs\";\nimport { cyberbugsService } from \"./../../../services/CyberbugsService\";\nimport { DISPLAY_LOADING, HIDE_LOADING } from \"./../../constants/LoadingConst\";\nimport { STATUS_CODE, TOKEN_CYBERBUGS, USERLOGIN_CYBERBUGS_STORAGE } from \"./../../../util/constants/settingSystem\";\nimport { history } from './../../../util/libs/history';\nimport { userService } from './../../../services/UserService';\nimport { GET_USERS_BY_ID_PROJECT_SAGA, GET_USERS_BY_ID_PROJECT } from './../../constants/Cyberbugs/UserConstant'; // import { GET_USER_BY_PROJECT_ID_SAGA , GET_USER_BY_PROJECT_ID} from './../../constants/Cyberbugs/UserConstant';\n\nfunction* signInCyberBugs(action) {\n  //action này chính là action đc gửi từ component lên\n  // console.log(\"action in signInCyberBugs\", action);\n  yield put({\n    type: DISPLAY_LOADING\n  });\n  yield delay(2000); //! code ở phía trên yield delay sẽ thực hiện trong vòng 2s, sau đó code ở duois mới đc thực hiện ==> nghĩa là sẽ hiển thị loading trong vòng 2s\n  //thực hiện call api\n\n  try {\n    const response = yield call(() => {\n      return cyberbugsService.signinCyberbugs(action.userLogin);\n    }); // console.log(\"response\", response);\n    //nếu đăng nhập lần đầu thành công thì accesstoken VÀ thông tin người dùng lưu vào storage\n\n    localStorage.setItem(TOKEN_CYBERBUGS, response.data.content.accessToken);\n    localStorage.setItem(USERLOGIN_CYBERBUGS_STORAGE, JSON.stringify(response.data.content)); //và đẩy thông tin người dùng lên reduxStore dể những component nào biding dữ liệu thì sẽ lấy data từ reduxStore về\n\n    yield put({\n      type: USER_LOGIN_CYBERBUGS,\n      userLogin: response.data.content\n    }); //*nếu đăng nhập thành công thì chuyển sang trang home\n    //?c1:\n    // action.userLogin.history.push('/home');\n    //?c2:\n    //lấy history từ redux Store về để thực hiện chuyển trang\n    // let history = yield select(state => state.HistoryReducer.history);\n    // // console.log(\"history in SAGA\", history);\n    // history.push('/home');\n    //?c3: dùng thư viện history phiên bản 4.10, lấy history đc truyền từ prop history ở component Router trong file index,js\n\n    history.push('/home');\n  } catch (error) {\n    yield put({\n      type: HIDE_LOADING\n    });\n    alert(\"mật khẩu hoặc email không đúng\");\n    console.log(\"error\", error.response.data);\n  } //đăng nhập thành công or thất bại thì sau khi call api phải tắt loading\n\n\n  yield put({\n    type: HIDE_LOADING\n  });\n}\n\nexport function* theoDoiSigninCyberBugs() {\n  yield takeLatest(USER_SIGNIN_CYBERBUGS_API, signInCyberBugs);\n} //?-------NHIỆM VỤ GET USERLIST KHI NHẬP VÀO AUTOCOMPLETE--------------\n//!hàm getUser lấy ra 1 mảng các đối tượng user có user.name chứa keyWord mà ng dùng nhập vào\n\nfunction* getUserCyberbugsSaga(action) {\n  //action này chính là action đc gửi từ component lên\n  console.log(\"action in getUserCyberbugsSaga\", action); // console.log(\"KEYWORD\", action.keyWord);\n  //thực hiện call api\n\n  try {\n    const response = yield call(() => {\n      return userService.getUser(action.keyWord);\n    }); // console.log(\"data of getUser\", response.data);\n    //*push mảng member tìm đc khi ng dùng search lên redux Store\n\n    yield put({\n      type: 'GET_USER_CYBERBUGS_SEARCH',\n      userSearchList: response.data.content\n    });\n  } catch (error) {\n    console.log(\"error\", error);\n  }\n}\n\nexport function* theoDoiGetUser() {\n  yield takeLatest(\"GET_USER_CYBERBUGS_SAGA\", getUserCyberbugsSaga);\n} //?-------NHIỆM VỤ THÊM USER VÀO PROJECT--------------\n//!hàm getUser lấy ra 1 mảng các đối tượng user có user.name chứa keyWord mà ng dùng nhập vào\n\nfunction* addUserProjectSaga(action) {\n  //action này chính là action đc gửi từ component lên\n  // console.log(\"action in signInCyberBugs\", action);\n  //thực hiện call api\n  try {\n    const response = yield call(() => {\n      return userService.assignUserProject(action.userProject);\n    });\n    console.log(\"data of assignUserProject\", response.data); //*gọi lại action saga load lại dự án\n\n    yield put({\n      type: 'GET_PROJECT_LIST_SAGA'\n    });\n  } catch (error) {\n    console.log(\"error\", error);\n  }\n}\n\nexport function* theoDoiAddUserProject() {\n  yield takeLatest(\"ADD_USER_PROJECT_SAGA\", addUserProjectSaga);\n} //?-------NHIỆM VỤ DELTETE USER FROM PROJECT--------------\n//!hàm getUser lấy ra 1 mảng các đối tượng user có user.name chứa keyWord mà ng dùng nhập vào\n\nfunction* delteUserProjectSaga(action) {\n  //action này chính là action đc gửi từ component lên\n  console.log(\"action in delteUserProjectSaga\", action); //thực hiện call api\n\n  try {\n    const response = yield call(() => {\n      return userService.deleteUserProject(action.userProject);\n    });\n    console.log(\"data of deleteUserProject\", response.data); //*gọi lại action saga load lại dự án\n\n    yield put({\n      type: 'GET_PROJECT_LIST_SAGA'\n    });\n  } catch (error) {\n    console.log(\"error\", error);\n  }\n}\n\nexport function* theoDoiDeleteUserProject() {\n  yield takeLatest(\"DELETE_USER_PROJECT_SAGA\", delteUserProjectSaga);\n} //?-------NHIỆM VỤ GET USERS ASSIGNED BY ID PROJECT FROM PROJECT--------------\n\nfunction* getUsersByIdProjectSaga(action) {\n  //action này chính là action đc gửi từ component lên\n  console.log(\"action in getUsersByIdProjectSaga\", action); //thực hiện call api\n\n  try {\n    const {\n      data,\n      status\n    } = yield call(() => {\n      return userService.getUsersByProjectId(action.idProject);\n    });\n    console.log(\"DATA of getUsersByIdProjectSaga\", data); //nếu lấy đc mảng users tương ứng vs project thì dispatch action lên redux\n\n    if (status === STATUS_CODE.SUCCESS) {\n      yield put({\n        type: GET_USERS_BY_ID_PROJECT,\n        arrUser: data.content\n      });\n    }\n  } catch (error) {\n    var _error$response;\n\n    console.log(\"error\", error.response.data);\n\n    if (((_error$response = error.response) === null || _error$response === void 0 ? void 0 : _error$response.data.statusCode) === STATUS_CODE.NOT_FOUND) {\n      yield put({\n        type: GET_USERS_BY_ID_PROJECT,\n        arrUser: []\n      });\n    }\n  }\n}\n\nexport function* theoDoiGetUsersByIdProjectSaga() {\n  yield takeLatest(GET_USERS_BY_ID_PROJECT_SAGA, getUsersByIdProjectSaga);\n}","map":{"version":3,"sources":["D:/Chun Folder/Test web html/Cyberbugs1/src/redux/sagas/CyberBugs/userCyberBugsSaga.js"],"names":["Axios","fork","take","takeEvery","delay","takeLatest","select","call","put","USER_LOGIN_CYBERBUGS","USER_SIGNIN_CYBERBUGS_API","cyberbugsService","DISPLAY_LOADING","HIDE_LOADING","STATUS_CODE","TOKEN_CYBERBUGS","USERLOGIN_CYBERBUGS_STORAGE","history","userService","GET_USERS_BY_ID_PROJECT_SAGA","GET_USERS_BY_ID_PROJECT","signInCyberBugs","action","type","response","signinCyberbugs","userLogin","localStorage","setItem","data","content","accessToken","JSON","stringify","push","error","alert","console","log","theoDoiSigninCyberBugs","getUserCyberbugsSaga","getUser","keyWord","userSearchList","theoDoiGetUser","addUserProjectSaga","assignUserProject","userProject","theoDoiAddUserProject","delteUserProjectSaga","deleteUserProject","theoDoiDeleteUserProject","getUsersByIdProjectSaga","status","getUsersByProjectId","idProject","SUCCESS","arrUser","statusCode","NOT_FOUND","theoDoiGetUsersByIdProjectSaga"],"mappings":"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","sourcesContent":["import Axios from \"axios\";\r\nimport {\r\n  fork,\r\n  take,\r\n  takeEvery,\r\n  delay,\r\n  takeLatest,\r\n  select,\r\n  call,\r\n  put,\r\n} from \"redux-saga/effects\";\r\nimport { USER_LOGIN_CYBERBUGS, USER_SIGNIN_CYBERBUGS_API } from \"./../../constants/Cyberbugs/Cyberbugs\";\r\nimport { cyberbugsService } from \"./../../../services/CyberbugsService\";\r\nimport { DISPLAY_LOADING, HIDE_LOADING } from \"./../../constants/LoadingConst\";\r\nimport {\r\n  STATUS_CODE,\r\n  TOKEN_CYBERBUGS,\r\n  USERLOGIN_CYBERBUGS_STORAGE,\r\n} from \"./../../../util/constants/settingSystem\";\r\n\r\nimport { history } from './../../../util/libs/history';\r\nimport { userService } from './../../../services/UserService';\r\nimport { GET_USERS_BY_ID_PROJECT_SAGA , GET_USERS_BY_ID_PROJECT} from './../../constants/Cyberbugs/UserConstant';\r\n\r\n\r\n\r\n// import { GET_USER_BY_PROJECT_ID_SAGA , GET_USER_BY_PROJECT_ID} from './../../constants/Cyberbugs/UserConstant';\r\n\r\n\r\n\r\n\r\nfunction* signInCyberBugs(action) {\r\n  //action này chính là action đc gửi từ component lên\r\n  // console.log(\"action in signInCyberBugs\", action);\r\n\r\n  yield put({\r\n    type: DISPLAY_LOADING,\r\n  });\r\n\r\n  yield delay(2000); //! code ở phía trên yield delay sẽ thực hiện trong vòng 2s, sau đó code ở duois mới đc thực hiện ==> nghĩa là sẽ hiển thị loading trong vòng 2s\r\n\r\n  //thực hiện call api\r\n  try {\r\n    const response = yield call(() => {\r\n      return cyberbugsService.signinCyberbugs(action.userLogin);\r\n    });\r\n    // console.log(\"response\", response);\r\n\r\n    //nếu đăng nhập lần đầu thành công thì accesstoken VÀ thông tin người dùng lưu vào storage\r\n    localStorage.setItem(TOKEN_CYBERBUGS, response.data.content.accessToken);\r\n    localStorage.setItem(\r\n      USERLOGIN_CYBERBUGS_STORAGE,\r\n      JSON.stringify(response.data.content)\r\n    );\r\n\r\n    //và đẩy thông tin người dùng lên reduxStore dể những component nào biding dữ liệu thì sẽ lấy data từ reduxStore về\r\n    yield put({\r\n      type: USER_LOGIN_CYBERBUGS,\r\n      userLogin: response.data.content,\r\n\r\n    })\r\n\r\n\r\n    //*nếu đăng nhập thành công thì chuyển sang trang home\r\n    //?c1:\r\n    // action.userLogin.history.push('/home');\r\n\r\n\r\n    //?c2:\r\n    //lấy history từ redux Store về để thực hiện chuyển trang\r\n    // let history = yield select(state => state.HistoryReducer.history);\r\n    // // console.log(\"history in SAGA\", history);\r\n    // history.push('/home');\r\n\r\n\r\n    //?c3: dùng thư viện history phiên bản 4.10, lấy history đc truyền từ prop history ở component Router trong file index,js\r\n    history.push('/home');\r\n\r\n\r\n\r\n  } catch (error) {\r\n    \r\n    yield put({\r\n      type: HIDE_LOADING,\r\n    });\r\n    alert(\"mật khẩu hoặc email không đúng\");\r\n    console.log(\"error\", error.response.data);\r\n  }\r\n\r\n  //đăng nhập thành công or thất bại thì sau khi call api phải tắt loading\r\n  yield put({\r\n    type: HIDE_LOADING,\r\n  });\r\n}\r\n\r\nexport function* theoDoiSigninCyberBugs() {\r\n  yield takeLatest(USER_SIGNIN_CYBERBUGS_API, signInCyberBugs);\r\n}\r\n\r\n\r\n\r\n\r\n//?-------NHIỆM VỤ GET USERLIST KHI NHẬP VÀO AUTOCOMPLETE--------------\r\n\r\n\r\n\r\n//!hàm getUser lấy ra 1 mảng các đối tượng user có user.name chứa keyWord mà ng dùng nhập vào\r\nfunction* getUserCyberbugsSaga(action) {\r\n  //action này chính là action đc gửi từ component lên\r\n  console.log(\"action in getUserCyberbugsSaga\", action);\r\n  // console.log(\"KEYWORD\", action.keyWord);\r\n \r\n  //thực hiện call api\r\n  try {\r\n    const response = yield call(() => {\r\n      return userService.getUser(action.keyWord);\r\n    });\r\n    // console.log(\"data of getUser\", response.data);\r\n    //*push mảng member tìm đc khi ng dùng search lên redux Store\r\n    yield put ({\r\n      type: 'GET_USER_CYBERBUGS_SEARCH',\r\n      userSearchList: response.data.content,\r\n    })\r\n\r\n  } catch (error) {\r\n   \r\n    console.log(\"error\", error);\r\n  }\r\n\r\n\r\n}\r\n\r\n\r\nexport function* theoDoiGetUser() {\r\n  yield takeLatest(\"GET_USER_CYBERBUGS_SAGA\", getUserCyberbugsSaga);\r\n}\r\n\r\n\r\n\r\n\r\n//?-------NHIỆM VỤ THÊM USER VÀO PROJECT--------------\r\n\r\n\r\n//!hàm getUser lấy ra 1 mảng các đối tượng user có user.name chứa keyWord mà ng dùng nhập vào\r\nfunction* addUserProjectSaga(action) {\r\n  //action này chính là action đc gửi từ component lên\r\n  // console.log(\"action in signInCyberBugs\", action);\r\n\r\n \r\n  //thực hiện call api\r\n  try {\r\n    const response = yield call(() => {\r\n      return userService.assignUserProject(action.userProject);\r\n    });\r\n    console.log(\"data of assignUserProject\", response.data);\r\n    //*gọi lại action saga load lại dự án\r\n    yield put ({\r\n      type: 'GET_PROJECT_LIST_SAGA',\r\n    })\r\n\r\n  } catch (error) {\r\n   \r\n    console.log(\"error\", error);\r\n  }\r\n\r\n\r\n}\r\n\r\n\r\nexport function* theoDoiAddUserProject() {\r\n  yield takeLatest(\"ADD_USER_PROJECT_SAGA\", addUserProjectSaga);\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n//?-------NHIỆM VỤ DELTETE USER FROM PROJECT--------------\r\n\r\n\r\n//!hàm getUser lấy ra 1 mảng các đối tượng user có user.name chứa keyWord mà ng dùng nhập vào\r\nfunction* delteUserProjectSaga(action) {\r\n  //action này chính là action đc gửi từ component lên\r\n  console.log(\"action in delteUserProjectSaga\", action);\r\n\r\n \r\n  //thực hiện call api\r\n  try {\r\n    const response = yield call(() => {\r\n      return userService.deleteUserProject(action.userProject);\r\n    });\r\n    console.log(\"data of deleteUserProject\", response.data);\r\n    //*gọi lại action saga load lại dự án\r\n    yield put ({\r\n      type: 'GET_PROJECT_LIST_SAGA',\r\n    })\r\n\r\n  } catch (error) {\r\n   \r\n    console.log(\"error\", error);\r\n  }\r\n\r\n\r\n}\r\n\r\n\r\nexport function* theoDoiDeleteUserProject() {\r\n  yield takeLatest(\"DELETE_USER_PROJECT_SAGA\", delteUserProjectSaga);\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n//?-------NHIỆM VỤ GET USERS ASSIGNED BY ID PROJECT FROM PROJECT--------------\r\n\r\nfunction* getUsersByIdProjectSaga(action) {\r\n  //action này chính là action đc gửi từ component lên\r\n  console.log(\"action in getUsersByIdProjectSaga\", action);\r\n\r\n \r\n  //thực hiện call api\r\n  try {\r\n    const{ data, status }  = yield call(() => {\r\n      return userService.getUsersByProjectId(action.idProject);\r\n    });\r\n    console.log(\"DATA of getUsersByIdProjectSaga\",data);\r\n   \r\n    //nếu lấy đc mảng users tương ứng vs project thì dispatch action lên redux\r\n    if(status === STATUS_CODE.SUCCESS) { \r\n      yield put ({\r\n        type: GET_USERS_BY_ID_PROJECT,\r\n        arrUser: data.content,\r\n      })\r\n    }\r\n\r\n\r\n  } catch (error) {\r\n   \r\n    console.log(\"error\", error.response.data);\r\n    if(error.response?.data.statusCode === STATUS_CODE.NOT_FOUND) {\r\n      yield put ({\r\n        type: GET_USERS_BY_ID_PROJECT,\r\n        arrUser: [],\r\n      })\r\n    }\r\n  }\r\n\r\n\r\n}\r\n\r\n\r\nexport function* theoDoiGetUsersByIdProjectSaga() {\r\n  yield takeLatest(GET_USERS_BY_ID_PROJECT_SAGA, getUsersByIdProjectSaga);\r\n}\r\n\r\n\r\n"]},"metadata":{},"sourceType":"module"}