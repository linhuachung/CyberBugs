{"ast":null,"code":"import { fork, take, takeEvery, delay, takeLatest, select, call, put } from \"redux-saga/effects\";\nimport { cyberbugsService } from './../../../services/CyberbugsService';\nimport { STATUS_CODE } from './../../../util/constants/settingSystem';\nimport { DISPLAY_LOADING, HIDE_LOADING } from \"./../../constants/LoadingConst\";\nimport { GET_ALL_PROJECT_CATEGORY_SAGA, GET_ALL_PROJECT_CATEGORY } from './../../constants/Cyberbugs/Cyberbugs';\nimport { history } from './../../../util/libs/history';\nimport { projectService } from '../../../services/ProjectService';\nimport { notifiFunction } from './../../../util/Notification/notificationCyberbugs';\nimport { GET_ALL_PROJECT, GET_ALL_PROJECT_SAGA } from './../../constants/Cyberbugs/ProjectCyberBugsConstants';\nimport { GET_USERS_BY_ID_PROJECT_SAGA } from './../../constants/Cyberbugs/UserConstant'; // -----------------------NHIỆM VỤ GET TASK CATEGORY-------------------\n\nfunction* createProjectSaga(action) {\n  console.log(\"action createProjectSaga\", action);\n  yield put({\n    type: DISPLAY_LOADING\n  });\n  yield delay(2000);\n\n  try {\n    //gọi api bằng yield call, hàm call nhận vào 1 callback function mà trả về promise\n    const {\n      data,\n      status\n    } = yield call(() => {\n      // return cyberbugsService.createProject(action.newProject);\n      return cyberbugsService.createProjectAuthorization(action.newProject);\n    }); // console.log(\"data saga\", data);\n\n    if (status === STATUS_CODE.SUCCESS) {\n      console.log(\"thành công rùi nè\", data); //nếu thêm project thành công rồi thì chuyển hướng trang qua project management để xem all project\n\n      history.push('/projectmanagement');\n    }\n  } catch (err) {\n    console.log(\"error\", err.response.data);\n  } //call api thành công or thất bại thi đều tắt loading\n\n\n  yield put({\n    type: HIDE_LOADING\n  });\n  ;\n}\n\nexport function* theoDoicreateProjectSaga() {\n  yield takeLatest('CREATE_PROJECT_SAGA', createProjectSaga);\n} // -----------------------NHIỆM VỤ GET ALL TASK-------------------\n\nfunction* getProjectListSaga(action) {\n  console.log(\"action getProjectListSaga\", action);\n  yield put({\n    type: DISPLAY_LOADING\n  });\n  yield delay(2000);\n\n  try {\n    const {\n      data,\n      status\n    } = yield call(() => {\n      return cyberbugsService.getProjectList();\n    });\n    console.log(\"data get list: \", data);\n    console.log(\"projectList\", data); //nếu call api thành công lấy đc projectList thì push dữ liệu lên reduxStore\n\n    if (status === STATUS_CODE.SUCCESS) {\n      yield put({\n        type: 'GET_PROJECT_LIST',\n        projectList: data.content\n      });\n    }\n  } catch (error) {\n    console.log(\"error\", error);\n  } // call api thành công or thất bại thi đều tắt loading\n\n\n  yield put({\n    type: HIDE_LOADING\n  });\n}\n\nexport function* theoDoiGetProjectListSaga() {\n  yield takeLatest('GET_PROJECT_LIST_SAGA', getProjectListSaga);\n} // -----------------------NHIỆM VỤ UPDATE TASK-------------------\n\nfunction* updateProjectSaga(action) {\n  console.log(\"action getProjectListSaga\", action);\n  yield put({\n    type: DISPLAY_LOADING\n  });\n  yield delay(2000);\n\n  try {\n    const {\n      data,\n      status\n    } = yield call(() => {\n      return cyberbugsService.updateProject(action.projectUpdate);\n    }); //nếu call api thành công lấy đc projectList thì push dữ liệu lên reduxStore\n\n    if (status === STATUS_CODE.SUCCESS) {\n      console.log(\"data in UPDATE_PROJECT_SAGA\", data); //nếu đưa dữ liệu cần update lên serve thành công thì gọi lại getAllProjectlist để lấy về ProjectList mới\n      //?c1: yield call ngoài call api thì có thể gọi lại những action saga, nhưng chỉ cần truyền vào yield call tên function generator cần thực hiện lại\n      // yield call (getProjectListSaga);\n      //!c2:( yield put đc dùng để gọi lại 1 action saga phổ biến hơn yield call)\n\n      yield put({\n        type: 'GET_PROJECT_LIST_SAGA'\n      }); //và đóng Editmodal\n\n      yield put({\n        type: 'CLOSE_DRAWER'\n      });\n    }\n  } catch (error) {\n    console.log(\"error\", error);\n  } //call api thành công or thất bại thi đều tắt loading\n\n\n  yield put({\n    type: HIDE_LOADING\n  });\n}\n\nexport function* theoDoiUpdateProjectSaga() {\n  yield takeLatest('UPDATE_PROJECT_SAGA', updateProjectSaga);\n} //? -----------------------NHIỆM VỤ DELETE PROJECT-------------------\n\nfunction* deleteProjectSaga(action) {\n  console.log(\"action deleteProjectSaga\", action);\n  yield put({\n    type: DISPLAY_LOADING\n  });\n  yield delay(2000);\n\n  try {\n    const res = yield call(() => {\n      return projectService.deleteProject(action.idProject);\n    }); // console.log(\"STATUS DELETE\", status);\n\n    if (res.status === STATUS_CODE.SUCCESS) {\n      //hiển thị notification của antdesign là đã xóa thành công \n      notifiFunction(\"success\", \"Delete Successfully\"); //nếu call delete api thành công thì dispatch action saga để lấy về task list mới nhất\n      // yield put({\n      //   type: 'GET_PROJECT_LIST',\n      //   projectList: res.content,\n      // })\n\n      yield call(() => {\n        return cyberbugsService.getProjectList();\n      });\n    } else {\n      //nếu xáo k thành công thì hiển thị notification xóa không thành công\n      notifiFunction(\"error\", \"Delete Fail\");\n    }\n  } catch (error) {\n    //nếu xáo k thành công thì hiển thị notification xóa không thành công\n    notifiFunction(\"error\", \"Delete Fail\");\n    console.log(\"error\", error);\n  } // call api thành công or thất bại thi đều tắt loading\n\n\n  yield put({\n    type: HIDE_LOADING\n  });\n}\n\nexport function* theoDoiDeleteProjectSaga() {\n  yield takeLatest('DELETE_PROJECT_SAGA', deleteProjectSaga);\n} //? -----------------------NHIỆM VỤ GET PROJECT DETAIL-------------------\n\nfunction* getProjectDetailSaga(action) {\n  console.log(\"action getProjectDetailSaga\", action);\n  yield put({\n    type: DISPLAY_LOADING\n  });\n  yield delay(2000);\n\n  try {\n    const {\n      data,\n      status\n    } = yield call(() => {\n      return projectService.getProjectDetai(action.projectId);\n    });\n    console.log(\"DATA.CONTENT of getProjectDetailSaga\", data.content);\n\n    if (status === STATUS_CODE.SUCCESS) {\n      //nếu call api lấy dữ liệu projectDetail thành công thì đưa dữ liệu lên redux\n      yield put({\n        type: 'PUT_PROJECT_DETAIL',\n        projectDetail: data.content\n      }); //hiển thị notification của antdesign là đã getProjectDetail thành công\n\n      notifiFunction(\"success\", \"getProjectDetail Successfully\");\n    } else {\n      //nếu getProjectDetail k thành công thì hiển thị notification không thành công\n      notifiFunction(\"error\", \"getProjectDetail Fail\");\n    }\n  } catch (error) {\n    //nếu getProjectDetail k thành công thì hiển thị notification không thành công\n    notifiFunction(\"error\", \"getProjectDetail Fail\"); //call api thành công or thất bại thi đều tắt loading\n\n    yield put({\n      type: HIDE_LOADING\n    });\n    console.log(\"error\", error.response.data);\n    alert(\"404 not found\"); //chuyển về lại trang projectmanagetment\n\n    history.push('/projectmanagement');\n  } //call api thành công or thất bại thi đều tắt loading\n\n\n  yield put({\n    type: HIDE_LOADING\n  });\n}\n\nexport function* theoDoiGetProjectDetailSaga() {\n  yield takeLatest('GET_PROJECT_DETAIL_SAGA', getProjectDetailSaga);\n} //? -----------------------NHIỆM VỤ GET ALL PROJECT cho DROPDOWN (khi nhấn vào button Create  Task ở Sidebar)-------------------\n\nfunction* getProjectAllSaga(action) {\n  console.log(\"action getProjectAllSaga\", action);\n  yield put({\n    type: DISPLAY_LOADING\n  });\n  yield delay(2000);\n\n  try {\n    const {\n      data,\n      status\n    } = yield call(() => {\n      return projectService.getAllProject();\n    });\n    console.log(\"projectList\", data); //nếu call api thành công lấy đc projectList thì push dữ liệu lên reduxStore\n\n    if (status === STATUS_CODE.SUCCESS) {\n      yield put({\n        type: GET_ALL_PROJECT,\n        arrProject: data.content\n      }); //lấy về list user asigned cho project đầu tiên ở select Project Name (hiển thị mặc định lần đầu)\n\n      yield put({\n        type: GET_USERS_BY_ID_PROJECT_SAGA,\n        idProject: data.content[0].id\n      });\n    }\n  } catch (error) {\n    console.log(\"error\", error);\n  } //call api thành công or thất bại thi đều tắt loading\n\n\n  yield put({\n    type: HIDE_LOADING\n  });\n}\n\nexport function* theoDoiGetAllProjectSaga() {\n  yield takeLatest(GET_ALL_PROJECT_SAGA, getProjectAllSaga);\n}","map":{"version":3,"sources":["D:/Chun Folder/Test web html/Cyberbugs1/src/redux/sagas/CyberBugs/ProjectSaga.js"],"names":["fork","take","takeEvery","delay","takeLatest","select","call","put","cyberbugsService","STATUS_CODE","DISPLAY_LOADING","HIDE_LOADING","GET_ALL_PROJECT_CATEGORY_SAGA","GET_ALL_PROJECT_CATEGORY","history","projectService","notifiFunction","GET_ALL_PROJECT","GET_ALL_PROJECT_SAGA","GET_USERS_BY_ID_PROJECT_SAGA","createProjectSaga","action","console","log","type","data","status","createProjectAuthorization","newProject","SUCCESS","push","err","response","theoDoicreateProjectSaga","getProjectListSaga","getProjectList","projectList","content","error","theoDoiGetProjectListSaga","updateProjectSaga","updateProject","projectUpdate","theoDoiUpdateProjectSaga","deleteProjectSaga","res","deleteProject","idProject","theoDoiDeleteProjectSaga","getProjectDetailSaga","getProjectDetai","projectId","projectDetail","alert","theoDoiGetProjectDetailSaga","getProjectAllSaga","getAllProject","arrProject","id","theoDoiGetAllProjectSaga"],"mappings":"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","sourcesContent":["import {\r\n  fork,\r\n  take,\r\n  takeEvery,\r\n  delay,\r\n  takeLatest,\r\n  select,\r\n  call,\r\n  put,\r\n} from \"redux-saga/effects\";\r\nimport { cyberbugsService } from './../../../services/CyberbugsService';\r\nimport { STATUS_CODE } from './../../../util/constants/settingSystem';\r\nimport { DISPLAY_LOADING, HIDE_LOADING } from \"./../../constants/LoadingConst\";\r\nimport { GET_ALL_PROJECT_CATEGORY_SAGA, GET_ALL_PROJECT_CATEGORY } from './../../constants/Cyberbugs/Cyberbugs';\r\nimport { history } from './../../../util/libs/history';\r\nimport { projectService } from '../../../services/ProjectService';\r\nimport { notifiFunction } from './../../../util/Notification/notificationCyberbugs';\r\nimport { GET_ALL_PROJECT, GET_ALL_PROJECT_SAGA } from './../../constants/Cyberbugs/ProjectCyberBugsConstants';\r\nimport { GET_USERS_BY_ID_PROJECT_SAGA } from './../../constants/Cyberbugs/UserConstant';\r\n\r\n// -----------------------NHIỆM VỤ GET TASK CATEGORY-------------------\r\n\r\nfunction* createProjectSaga(action) {\r\n  console.log(\"action createProjectSaga\", action);\r\n\r\n  yield put({\r\n    type: DISPLAY_LOADING,\r\n  });\r\n\r\n  yield delay(2000);\r\n\r\n  try {\r\n\r\n    //gọi api bằng yield call, hàm call nhận vào 1 callback function mà trả về promise\r\n    const { data, status } = yield call(() => {\r\n      // return cyberbugsService.createProject(action.newProject);\r\n      return cyberbugsService.createProjectAuthorization(action.newProject);\r\n    });\r\n\r\n    // console.log(\"data saga\", data);\r\n\r\n    if (status === STATUS_CODE.SUCCESS) {\r\n      console.log(\"thành công rùi nè\", data);\r\n      //nếu thêm project thành công rồi thì chuyển hướng trang qua project management để xem all project\r\n      history.push('/projectmanagement');\r\n    }\r\n\r\n  } catch (err) {\r\n    console.log(\"error\", err.response.data);\r\n  }\r\n\r\n\r\n  //call api thành công or thất bại thi đều tắt loading\r\n  yield put({\r\n    type: HIDE_LOADING,\r\n  });\r\n\r\n  ;\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\nexport function* theoDoicreateProjectSaga() {\r\n  yield takeLatest('CREATE_PROJECT_SAGA', createProjectSaga);\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n// -----------------------NHIỆM VỤ GET ALL TASK-------------------\r\n\r\n\r\nfunction* getProjectListSaga(action) {\r\n  console.log(\"action getProjectListSaga\", action);\r\n\r\n  yield put({\r\n    type: DISPLAY_LOADING,\r\n  });\r\n\r\n  yield delay(2000);\r\n\r\n  try {\r\n\r\n    const { data, status } = yield call(() => {\r\n\r\n      return cyberbugsService.getProjectList();\r\n    });\r\n    console.log(\"data get list: \", data);\r\n    console.log(\"projectList\", data);\r\n\r\n    //nếu call api thành công lấy đc projectList thì push dữ liệu lên reduxStore\r\n    if (status === STATUS_CODE.SUCCESS) {\r\n      yield put({\r\n        type: 'GET_PROJECT_LIST',\r\n        projectList: data.content,\r\n      });\r\n\r\n    }\r\n\r\n  } catch (error) {\r\n    console.log(\"error\", error);\r\n  }\r\n\r\n  // call api thành công or thất bại thi đều tắt loading\r\n  yield put({\r\n    type: HIDE_LOADING,\r\n  });\r\n\r\n}\r\n\r\n\r\n\r\nexport function* theoDoiGetProjectListSaga() {\r\n  yield takeLatest('GET_PROJECT_LIST_SAGA', getProjectListSaga);\r\n}\r\n\r\n\r\n\r\n\r\n\r\n// -----------------------NHIỆM VỤ UPDATE TASK-------------------\r\n\r\n\r\nfunction* updateProjectSaga(action) {\r\n  console.log(\"action getProjectListSaga\", action);\r\n\r\n  yield put({\r\n    type: DISPLAY_LOADING,\r\n  });\r\n\r\n  yield delay(2000);\r\n\r\n  try {\r\n\r\n    const { data, status } = yield call(() => {\r\n      return cyberbugsService.updateProject(action.projectUpdate);\r\n    });\r\n\r\n    //nếu call api thành công lấy đc projectList thì push dữ liệu lên reduxStore\r\n    if (status === STATUS_CODE.SUCCESS) {\r\n      console.log(\"data in UPDATE_PROJECT_SAGA\", data);\r\n      //nếu đưa dữ liệu cần update lên serve thành công thì gọi lại getAllProjectlist để lấy về ProjectList mới\r\n\r\n      //?c1: yield call ngoài call api thì có thể gọi lại những action saga, nhưng chỉ cần truyền vào yield call tên function generator cần thực hiện lại\r\n      // yield call (getProjectListSaga);\r\n\r\n\r\n      //!c2:( yield put đc dùng để gọi lại 1 action saga phổ biến hơn yield call)\r\n      yield put({\r\n        type: 'GET_PROJECT_LIST_SAGA',\r\n      });\r\n\r\n      //và đóng Editmodal\r\n      yield put({\r\n        type: 'CLOSE_DRAWER',\r\n      });\r\n    }\r\n\r\n  } catch (error) {\r\n    console.log(\"error\", error);\r\n  }\r\n\r\n  //call api thành công or thất bại thi đều tắt loading\r\n  yield put({\r\n    type: HIDE_LOADING,\r\n  });\r\n\r\n}\r\n\r\n\r\n\r\nexport function* theoDoiUpdateProjectSaga() {\r\n  yield takeLatest('UPDATE_PROJECT_SAGA', updateProjectSaga);\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n//? -----------------------NHIỆM VỤ DELETE PROJECT-------------------\r\n\r\n\r\nfunction* deleteProjectSaga(action) {\r\n  console.log(\"action deleteProjectSaga\", action);\r\n\r\n  yield put({\r\n    type: DISPLAY_LOADING,\r\n  });\r\n\r\n  yield delay(2000);\r\n\r\n  try {\r\n\r\n    const res = yield call(() => {\r\n      return projectService.deleteProject(action.idProject);\r\n    });\r\n    // console.log(\"STATUS DELETE\", status);\r\n\r\n    if (res.status === STATUS_CODE.SUCCESS) {\r\n\r\n      //hiển thị notification của antdesign là đã xóa thành công \r\n      notifiFunction(\"success\", \"Delete Successfully\");\r\n\r\n\r\n      //nếu call delete api thành công thì dispatch action saga để lấy về task list mới nhất\r\n      // yield put({\r\n      //   type: 'GET_PROJECT_LIST',\r\n      //   projectList: res.content,\r\n      // })\r\n      yield call(() => {\r\n        return cyberbugsService.getProjectList();\r\n      });\r\n    } else {\r\n      //nếu xáo k thành công thì hiển thị notification xóa không thành công\r\n      notifiFunction(\"error\", \"Delete Fail\");\r\n    }\r\n\r\n\r\n  } catch (error) {\r\n    //nếu xáo k thành công thì hiển thị notification xóa không thành công\r\n    notifiFunction(\"error\", \"Delete Fail\");\r\n    console.log(\"error\", error);\r\n  }\r\n\r\n  // call api thành công or thất bại thi đều tắt loading\r\n  yield put({\r\n    type: HIDE_LOADING,\r\n  });\r\n\r\n}\r\n\r\n\r\n\r\nexport function* theoDoiDeleteProjectSaga() {\r\n  yield takeLatest('DELETE_PROJECT_SAGA', deleteProjectSaga);\r\n}\r\n\r\n\r\n\r\n\r\n//? -----------------------NHIỆM VỤ GET PROJECT DETAIL-------------------\r\n\r\n\r\nfunction* getProjectDetailSaga(action) {\r\n  console.log(\"action getProjectDetailSaga\", action);\r\n\r\n  yield put({\r\n    type: DISPLAY_LOADING,\r\n  });\r\n\r\n  yield delay(2000);\r\n\r\n  try {\r\n\r\n    const { data, status } = yield call(() => {\r\n      return projectService.getProjectDetai(action.projectId);\r\n    });\r\n\r\n    console.log(\"DATA.CONTENT of getProjectDetailSaga\", data.content);\r\n    if (status === STATUS_CODE.SUCCESS) {\r\n      //nếu call api lấy dữ liệu projectDetail thành công thì đưa dữ liệu lên redux\r\n      yield put({\r\n        type: 'PUT_PROJECT_DETAIL',\r\n        projectDetail: data.content,\r\n      })\r\n\r\n\r\n      //hiển thị notification của antdesign là đã getProjectDetail thành công\r\n      notifiFunction(\"success\", \"getProjectDetail Successfully\");\r\n\r\n    } else {\r\n      //nếu getProjectDetail k thành công thì hiển thị notification không thành công\r\n      notifiFunction(\"error\", \"getProjectDetail Fail\");\r\n\r\n    }\r\n\r\n\r\n  } catch (error) {\r\n    //nếu getProjectDetail k thành công thì hiển thị notification không thành công\r\n    notifiFunction(\"error\", \"getProjectDetail Fail\");\r\n    //call api thành công or thất bại thi đều tắt loading\r\n    yield put({\r\n      type: HIDE_LOADING,\r\n    });\r\n    console.log(\"error\", error.response.data);\r\n    alert(\"404 not found\");\r\n    //chuyển về lại trang projectmanagetment\r\n    history.push('/projectmanagement');\r\n\r\n  }\r\n\r\n  //call api thành công or thất bại thi đều tắt loading\r\n  yield put({\r\n    type: HIDE_LOADING,\r\n  });\r\n\r\n}\r\n\r\n\r\n\r\nexport function* theoDoiGetProjectDetailSaga() {\r\n  yield takeLatest('GET_PROJECT_DETAIL_SAGA', getProjectDetailSaga);\r\n}\r\n\r\n\r\n\r\n//? -----------------------NHIỆM VỤ GET ALL PROJECT cho DROPDOWN (khi nhấn vào button Create  Task ở Sidebar)-------------------\r\n\r\n\r\nfunction* getProjectAllSaga(action) {\r\n  console.log(\"action getProjectAllSaga\", action);\r\n\r\n  yield put({\r\n    type: DISPLAY_LOADING,\r\n  });\r\n\r\n  yield delay(2000);\r\n\r\n  try {\r\n\r\n    const { data, status } = yield call(() => {\r\n      return projectService.getAllProject();\r\n    });\r\n\r\n    console.log(\"projectList\", data);\r\n\r\n    //nếu call api thành công lấy đc projectList thì push dữ liệu lên reduxStore\r\n    if (status === STATUS_CODE.SUCCESS) {\r\n      yield put({\r\n        type: GET_ALL_PROJECT,\r\n        arrProject: data.content,\r\n      });\r\n\r\n      //lấy về list user asigned cho project đầu tiên ở select Project Name (hiển thị mặc định lần đầu)\r\n      yield put({\r\n        type: GET_USERS_BY_ID_PROJECT_SAGA,\r\n        idProject: data.content[0].id,\r\n      })\r\n    }\r\n\r\n  } catch (error) {\r\n    console.log(\"error\", error);\r\n  }\r\n\r\n  //call api thành công or thất bại thi đều tắt loading\r\n  yield put({\r\n    type: HIDE_LOADING,\r\n  });\r\n\r\n}\r\n\r\n\r\n\r\nexport function* theoDoiGetAllProjectSaga() {\r\n  yield takeLatest(GET_ALL_PROJECT_SAGA, getProjectAllSaga);\r\n}\r\n\r\n\r\n"]},"metadata":{},"sourceType":"module"}