{"ast":null,"code":"import { GET_TASK_API } from '../constants/TodoListConstants';\nimport Axios from 'axios';\nimport reduxThunk from 'redux-thunk';\nexport const getTaskListApi = () => {\n  console.log(\"hàm getTaskListApi\");\n  return async dispatch => {\n    //? Xử lí thành công thì viết ở try, xử lí không thành công thì viết ở catch\n    try {\n      //await sẽ đợi  Axxios call api và trả về response, sau đó gán kqua response lấy đc vào biến response\n      let response = await Axios({\n        url: 'http://svcy.myclass.vn/api/ToDoList/GetAllTask',\n        method: 'GET'\n      });\n      console.log(\"RESPONSE\", response);\n      console.log(\"DATA\", response.data);\n\n      if (response.status === 200) {\n        dispatch({\n          type: GET_TASK_API,\n          taskList: response.data\n        });\n      }\n    } catch (errors) {\n      console.log(\"ERRORS\", errors.response.data);\n    }\n  };\n};\nexport const addTaskApi = taskName => {\n  return async dispatch => {\n    try {\n      //?await giúp chuyển hàm Axios từ hàm bất đồng bộ thành hàm đồng bộ\n      let response = await Axios({\n        url: 'http://svcy.myclass.vn/api/ToDoList/AddTask',\n        method: 'POST',\n        data: {\n          taskName: taskName\n        } //gửi lên serve 1 task mới\n\n      }); //lệnh if phải đợi Axios chạy xong thì mới chạy\n\n      if (response.status === 200) {\n        dispatch(getTaskListApi());\n      }\n    } catch (errors) {\n      console.log(\"ERRORS\", errors.response.data);\n    } // promise.then((response) => {\n    //     // console.log(\"response\", response);\n    //     //?sau khi đưa dữ liệu thành công lên serve thì dispatch lại hàm getTaskListApi để lấy đc danh sách mới nhất\n    //     dispatch(getTaskListApi());\n    // })\n    // promise.catch((errors) => {\n    //     alert(errors.response.data);     //task name is already exists!\n    // })\n\n  };\n};\nexport const addTaskDoneApi = taskName => {\n  return dispatch => {\n    let promise = Axios({\n      url: `http://svcy.myclass.vn/api/ToDoList/doneTask?taskName=${taskName}`,\n      method: 'PUT'\n    });\n    promise.then(response => {\n      console.log(\"response\", response); //sau khi thêm task thành công thì dispatch lại hàm getTaskListApi để load lại task\n\n      dispatch(getTaskListApi());\n    });\n    promise.catch(errors => {\n      console.log(errors.response.data);\n    });\n  };\n};\nexport const deleteTaskApi = taskName => {\n  return dispatch => {\n    let promise = Axios({\n      url: `http://svcy.myclass.vn/api/ToDoList/deleteTask?taskName=${taskName}`,\n      method: 'DELETE'\n    });\n    promise.then(response => {\n      console.log(\"response\", response); //sau khi delete task thành công ở server thì dispatch lại hàm getTaskListApi để load lại task\n\n      dispatch(getTaskListApi());\n    });\n    promise.catch(errors => {\n      console.log(errors.response.data);\n    });\n  };\n};\nexport const rejectTaskApi = taskName => {\n  return dispatch => {\n    let promise = Axios({\n      url: `http://svcy.myclass.vn/api/ToDoList/rejectTask?taskName=${taskName}`,\n      method: 'PUT'\n    });\n    promise.then(response => {\n      console.log(\"response\", response); //sau khi rejeect task thành công ở api thì dispatch lại hàm getTaskListApi để load lại task\n\n      dispatch(getTaskListApi());\n    });\n    promise.catch(errors => {\n      console.log(errors.response.data);\n    });\n  };\n};","map":{"version":3,"sources":["D:/Chun Folder/Test web html/Cyberbugs1/src/redux/actions/TodoListAction.js"],"names":["GET_TASK_API","Axios","reduxThunk","getTaskListApi","console","log","dispatch","response","url","method","data","status","type","taskList","errors","addTaskApi","taskName","addTaskDoneApi","promise","then","catch","deleteTaskApi","rejectTaskApi"],"mappings":"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","sourcesContent":["import {GET_TASK_API} from '../constants/TodoListConstants';\r\nimport Axios from 'axios';\r\nimport  reduxThunk  from  'redux-thunk';\r\n\r\n\r\n\r\n\r\n\r\nexport const getTaskListApi = () => {\r\n  console.log(\"hàm getTaskListApi\")\r\n\r\n  return async dispatch => {\r\n    \r\n\r\n    //? Xử lí thành công thì viết ở try, xử lí không thành công thì viết ở catch\r\n    try {\r\n      \r\n      //await sẽ đợi  Axxios call api và trả về response, sau đó gán kqua response lấy đc vào biến response\r\n        let response = await Axios({\r\n          url: 'http://svcy.myclass.vn/api/ToDoList/GetAllTask',\r\n          method: 'GET',\r\n      });\r\n\r\n      console.log(\"RESPONSE\", response);\r\n      console.log(\"DATA\", response.data);\r\n\r\n      if(response.status === 200) {\r\n        dispatch({\r\n                type: GET_TASK_API,\r\n                taskList: response.data,\r\n        })\r\n      }\r\n\r\n    } catch(errors) {\r\n        console.log(\"ERRORS\", errors.response.data);\r\n    }\r\n  }\r\n}\r\n\r\n\r\n\r\nexport const addTaskApi = (taskName) => {\r\n  return async dispatch => {\r\n    \r\n    try {\r\n\r\n      //?await giúp chuyển hàm Axios từ hàm bất đồng bộ thành hàm đồng bộ\r\n        let response = await Axios({\r\n          url: 'http://svcy.myclass.vn/api/ToDoList/AddTask',\r\n          method: 'POST',\r\n          data: {taskName: taskName},  //gửi lên serve 1 task mới\r\n      });\r\n\r\n\r\n      //lệnh if phải đợi Axios chạy xong thì mới chạy\r\n      if( response.status === 200) {\r\n        dispatch(getTaskListApi());\r\n      }\r\n  \r\n    } catch (errors) {\r\n        console.log(\"ERRORS\", errors.response.data)\r\n    }\r\n   \r\n\r\n\r\n\r\n\r\n\r\n\r\n  // promise.then((response) => {\r\n  //     // console.log(\"response\", response);\r\n  //     //?sau khi đưa dữ liệu thành công lên serve thì dispatch lại hàm getTaskListApi để lấy đc danh sách mới nhất\r\n  //     dispatch(getTaskListApi());\r\n  // })\r\n\r\n  // promise.catch((errors) => {\r\n  //     alert(errors.response.data);     //task name is already exists!\r\n  // })\r\n  }\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\nexport const addTaskDoneApi = (taskName) => {\r\n    return dispatch => {\r\n      let promise = Axios({\r\n        url: `http://svcy.myclass.vn/api/ToDoList/doneTask?taskName=${taskName}`,\r\n        method: 'PUT',\r\n    })\r\n\r\n    promise.then((response) => {\r\n        console.log(\"response\", response);\r\n        //sau khi thêm task thành công thì dispatch lại hàm getTaskListApi để load lại task\r\n        dispatch(getTaskListApi());\r\n\r\n    });\r\n\r\n    promise.catch((errors) => {\r\n        console.log(errors.response.data); \r\n    })\r\n    }\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\nexport const deleteTaskApi = (taskName) => {\r\n  return dispatch => {\r\n    let promise = Axios({\r\n      url: `http://svcy.myclass.vn/api/ToDoList/deleteTask?taskName=${taskName}`,\r\n      method: 'DELETE',\r\n  })\r\n\r\n  promise.then((response) => {\r\n      console.log(\"response\", response);\r\n      //sau khi delete task thành công ở server thì dispatch lại hàm getTaskListApi để load lại task\r\n      dispatch(getTaskListApi());\r\n\r\n  });\r\n\r\n  promise.catch((errors) => {\r\n      console.log(errors.response.data); \r\n  })\r\n  }\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\nexport const rejectTaskApi = (taskName) => {\r\n    return dispatch => {\r\n      let promise = Axios({\r\n        url: `http://svcy.myclass.vn/api/ToDoList/rejectTask?taskName=${taskName}`,\r\n        method: 'PUT',\r\n    })\r\n\r\n    promise.then((response) => {\r\n        console.log(\"response\", response);\r\n        //sau khi rejeect task thành công ở api thì dispatch lại hàm getTaskListApi để load lại task\r\n        dispatch(getTaskListApi());\r\n\r\n    });\r\n\r\n    promise.catch((errors) => {\r\n        console.log(errors.response.data); \r\n    })\r\n    }\r\n}\r\n\r\n"]},"metadata":{},"sourceType":"module"}